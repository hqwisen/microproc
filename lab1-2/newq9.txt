nop
nop
nop
nop

// test value in r1, r2 (commented if running test)
// movi 1, 0xa060
// movi 2, 0x88dc
// movi 1, 0x0001
// movi 2, 0x0001

sw 1, 0, 1
sw 2, 0, 2


// If r2 null, r3 and r4 stays at 0
// beq 2, 0, end

// Setting empty value in (r4, r3) if r1 or r2 is null
movi 3, 0x0000
movi 4, 0x0000

// (r7, r6) stores shifted r1
movi 7, 0x0000
addi 6, 1, 0

// init counter in RAM address 10 (arbitrary)
add 5, 0, 0
sw 5, 0, 10

// init. mask
movi 5, 0x0001

// loop end when r6 is shifted 16 times i.e. = 0 (# of bits of REG)
loop: sw 6, 0, 6 // save r6 in ram
sw 7, 0, 7 // save r7 in ram

lw 6, 0, 10
addi 7, 0, 17 // 16 cycle (we check starting at 1 that's why 17)
addi 6, 6, 1
sw 6, 0, 10
beq 6, 7, end

// See if need to add (based on r2 bits that match the mask in r5)
nand 6, 5, 2
nand 7, 6, 6 // inverse the nand => and
// if mask and result are equal => bit is 1 in r2 that match the mask
beq 5, 7, op
sw 5, 0, 5
beq 0, 0, shift

// Addition of (r4, r3) + (r7, r6)
op: lw 6, 0, 6
lw 7, 0, 7

sw 1, 0, 1
sw 2, 0, 2
sw 5, 0, 5

/////////////// Start of 32 bits addition (r7, r6) + (r4, r3) ///////////////

// ADD 10...0 for nand to know MSB
movi 5, 0x8000
nand 1, 3, 5
nand 2, 6, 5

// Now we check if we have a CF. 3 cases : 11, 01-10, 00

// CHECK if 11 in MSB for both then CF = 1
movi 5, 0x7fff
beq 1, 5, havefirst
beq 2, 5, havesecond

// Case with 00, no CF => simple add
add 3, 3, 6
add 4, 4, 7
beq 0, 0, shift

havefirst: beq 2, 5, havetwoone
// Case with 10-01
havesecond: add 3, 3, 6
movi 5, 0x8000
nand 1, 3, 5
movi 5, 0x7fff
beq 1, 5, withoutcf
// with CF here
add 4, 4, 7
addi 4, 4, 1
beq 0, 0, shift

// If there is no CF
withoutcf: add 4, 4, 7
beq 0, 0, shift

// Case with 11
havetwoone: add 3, 3, 6
add 4, 4, 7
addi 4, 4, 1
beq 0, 0, shift

/////////////// End of 32 bits add. ///////////////

// Shifting (r7, r6)
// NOTE: even if we lw r6 and r7 in op
// when not doing the op, the regs must still load back
shift: lw 6, 0, 6
lw 7, 0, 7
movi 5, 0x8000
nand 1, 6, 5
add 6, 6, 6 // shift left r6
add 7, 7, 7 // shift left r7
movi 5, 0xffff
// if r1 = 0xffff => no CF
beq 1, 5, shiftmask
addi 7, 7, 1
// shift mask r5
shiftmask: lw 5, 0, 5
add 5, 5, 5
// load back r1 and r2
lw 1, 0, 1
lw 2, 0, 2
beq 0, 0, loop
end: halt
